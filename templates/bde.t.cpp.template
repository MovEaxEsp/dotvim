[*leftCenterRight("// [-1-]_[-2-].t.cpp", "", "-*-C++-*-")*]

#include <[-1-]_[-2-].h>

#include <baesu_stacktracetestallocator.h>

#include <bslim_testutil.h>

#include <bsl_iostream.h>

using namespace BloombergLP;
using namespace [-1-];
using namespace bsl;

//=============================================================================
//                                  TEST PLAN
//-----------------------------------------------------------------------------
//                              *** Overview ***
//
// TODO
//
// ----------------------------------------------------------------------------
// [  ] TODO
// ----------------------------------------------------------------------------
// [ 1] Breathing Test

//=============================================================================
//                      STANDARD BDE ASSERT TEST MACROS
//-----------------------------------------------------------------------------
static int testStatus = 0;

static void aSsErT( int c, const char *s, int i )
{
    if (c) {
        cout << "Error " << __FILE__ << "(" << i << "): " << s
             << "     (failed)" << endl;
        if (0 <= testStatus && testStatus <= 100) ++testStatus;
    }
}

#define ASSERT(X) { aSsErT( !(X), #X, __LINE__); }

// ============================================================================
//                      STANDARD BDE TEST DRIVER MACROS
// ----------------------------------------------------------------------------

#define ASSERT       BSLIM_TESTUTIL_ASSERT
#define LOOP_ASSERT  BSLIM_TESTUTIL_LOOP_ASSERT
#define LOOP0_ASSERT BSLIM_TESTUTIL_LOOP0_ASSERT
#define LOOP1_ASSERT BSLIM_TESTUTIL_LOOP1_ASSERT
#define LOOP2_ASSERT BSLIM_TESTUTIL_LOOP2_ASSERT
#define LOOP3_ASSERT BSLIM_TESTUTIL_LOOP3_ASSERT
#define LOOP4_ASSERT BSLIM_TESTUTIL_LOOP4_ASSERT
#define LOOP5_ASSERT BSLIM_TESTUTIL_LOOP5_ASSERT
#define LOOP6_ASSERT BSLIM_TESTUTIL_LOOP6_ASSERT
#define ASSERTV      BSLIM_TESTUTIL_ASSERTV

#define Q   BSLIM_TESTUTIL_Q   // Quote identifier literally.
#define P   BSLIM_TESTUTIL_P   // Print identifier and value.
#define P_  BSLIM_TESTUTIL_P_  // P(X) without newline.
#define T_  BSLIM_TESTUTIL_T_  // Print a tab (w/o newline).
#define L_  BSLIM_TESTUTIL_L_  // current Line number

//=============================================================================
//                      GLOBAL HELPER FUNCTIONS FOR TESTING
//-----------------------------------------------------------------------------

// FUNCTIONS
void testAssertFailureHandler(const char *text, const char *file, int line)
{
    cout << "ASSERT FAILED"
         << "\n\tText: " << text
         << "\n\tFile: " << file
         << "\n\tLine: " << line
         << endl;

    ASSERT(false && "ASSERT FAILED");
}

//=============================================================================
//                                MAIN PROGRAM
//-----------------------------------------------------------------------------

int main(int argc, char *argv[])
{
    int test = argc > 1 ? atoi(argv[1]) : 0;
    int verbose = argc > 2;

    cout << "TEST " << __FILE__ << " CASE " << test << endl;

    // Use test allocator
    baesu_StackTraceTestAllocator testAllocator;
    bslma::Default::setDefaultAllocatorRaw(&testAllocator);

    // Set assert failure handler
    bsls::Assert::setFailureHandler(&testAssertFailureHandler);

    switch (test) { case 0:
[*expandTemplate("test_case", "1", "BREATHING TEST")*]
      default: {
        cerr << "WARNING: CASE '" << test << "' NOT FOUND." << endl;
        testStatus = -1;
      }
    }

    LOOP_ASSERT(testAllocator.numBlocksInUse(),
                testAllocator.numBlocksInUse() == 0);

    if (testStatus > 0) {
        cerr << "Error, non-zero test status = " << testStatus << "." << endl;
    }
    return testStatus;
}

[*expandTemplate("copyright")*]
