global !p

from ultisnip_util import *

def clearSnipLine(snip):
	"""
	Clear the current line of the specified 'snip' and set the current
	position to the beginning of it.
	"""
	snip.buffer[snip.line] = ""
	snip.cursor.set(snip.line, 0)

endglobal

                                   # ######
                                   # method
                                   # ######

pre_expand "clearSnipLine(snip)"
snippet method
	/**
	 * @method $2
     * $0
     *
`!p for s in t[3].split(","):
	snip.rv += "     * @param {} " + s.strip() + "\n"
`     *
     * @return {type}
     */
    $2: undefined,

$1.$2 = function($3) {

};
endsnippet

                                   # ######
                                   # module
                                   # ######

pre_expand "clearSnipLine(snip)"
snippet module
// ${1/.*/\L$0\E/g}.js                                          -*-JavaScript-*-

define([
	"@${2:js}",
	"@${3:runtime}",
	"#moduleid"
],
function (
	JS,
	Runtime,
	ModuleId
) {

var logger = new Runtime.Logger(ModuleId);

`!p snip.rv = centerBorder("=", t[1])`
`!p snip.rv = centerPadding("// " + t[1]) + "// "`$1
`!p snip.rv = centerBorder("=", t[1])`

const $1 = {
$0
};

`!p snip.rv = centerBorder("-", t[1])`
`!p snip.rv = centerPadding("// " + t[1]) + "// "`$1
`!p snip.rv = centerBorder("-", t[1])`

return $1;

});

`!p snip.rv = copyright()`
endsnippet

                                # ###########
                                # test_driver
                                # ###########

snippet test_driver
// $1.t.js                                          -*-JavaScript-*-

define([
],
function (
) {

// ============================================================================
//                                TEST APPARATUS
// ----------------------------------------------------------------------------

const T      = JS.test;
let   H      = null;
const assert = JS.assert;

// ============================================================================
//                                  TEST CASES
// ----------------------------------------------------------------------------

const cases = [
    T.case("$2", function () {
	$0
    })
];

// ============================================================================
//                                 MAIN PROGRAM
// ----------------------------------------------------------------------------

return {
    main: function (context, parameters) {
        H = T.harness(cases, parameters);
        H.run();
    }
};

});

`!p snip.rv = copyright()`
endsnippet

                                  # #########
                                  # test_case
                                  # #########

pre_expand "clearSnipLine(snip)"
snippet test_case
    // ------------------------------------------------------------------------
    // $1
    //
    // Concerns:
	//  a) $0
    // ------------------------------------------------------------------------
    T.case("$1", async function () {
		// TODO
    }),

endsnippet
