# Snippets common to C++ header/implementation files

global !p
from ultisnip_util import *

def classDef(name):
    """
    Return the class definition for a class with the specified 'name'.
    """

    template = string.Template("""class $name {
    // TODO

  private:
    // DATA

    // NOT IMPLEMENTED
    $name(const $name&);
    $name& operator=(const $name&);

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION($name,
                                   bslma::UsesBslmaAllocator);

    // CREATORS
    explicit $name(bslma::Allocator *basicAllocator = 0);

    // MANIPULATORS

    // ACCESSORS
};""")

    return template.safe_substitute({"name":name})

def structDef(name):
    """
    Return the definition for a struct with the specified 'name'.
    """

    template = string.Template("""struct $name {
    // TODO

  public:
    // PUBLIC DATA

    // NOT IMPLEMENTED
    $name(const $name&);
    $name& operator=(const $name&);

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION($name,
                                   bslma::UsesBslmaAllocator);

    // CREATORS
    explicit $name(bslma::Allocator *basicAllocator = 0);

    // MANIPULATORS

    // ACCESSORS
};""")

    return template.safe_substitute({"name":name})

def utilDef(name):
    """
    Return the definition for a utility struct with the specified 'name'.
    """

    template = string.Template("""struct $name {
    // TODO

    // CLASS METHODS
};""")

    return template.safe_substitute({"name":name})

def protocolDef(name):
    """
    Return the definition of a protocol class with the specified 'name'.
    """

    template = string.Template("""class $name {

  public:
    // CREATORS
    virtual ~$name();

    // MANIPULATORS
};""")

    return template.safe_substitute({"name":name})

def enumDef(name):
    """
    Return the definition of an enum struct with the specified 'name'.
    """

    template = string.Template("""struct $name {

    enum Enum {

    };
};""")

    return template.safe_substitute({"name":name})

# Return the file header for the specified package and component in a header
# file
def fileHeader_h(package, component):
	comp = "// " + package + "_" + component.lower() + ".h"
	firstLine = comp + rightAlign(79 - len(comp), "-*-C++-*-")

	guard = "INCLUDED_" + package.upper() + "_" + component.upper()

	template = """$firstLine
#ifndef $guard
#define $guard

//@PURPOSE: TODO
//
//@CLASSES:
// """ + package + "::" + component + """
//
//@SEE_ALSO:
//
//@DESCRIPTION: TODO

namespace BloombergLP {"""

	return string.Template(template).safe_substitute({
		"firstLine": firstLine,
		"guard":guard
	})

# Return the file footer
def fileFooter_h():
	return """}  // close package namespace
}  // close enterprise namespace

#endif

""" + copyright()

# Return the file header for the specified package and component for a cpp
# file
def fileHeader_cpp(package, component):
    comp = "// " + package + "_" + component.lower() + ".cpp"
    firstLine = comp + rightAlign(79 - len(comp), "-*-C++-*-")

    guard = "INCLUDED_" + package.upper() + "_" + component.upper()

    template = string.Template("""$firstLine
#include <${package}_${component}.h>

namespace BloombergLP {""")

    return template.safe_substitute({"firstLine": firstLine,
                                     "package": package.lower(),
                                     "component": component.lower()})

# Return the file footer
def fileFooter_cpp():
    return """}  // close package namespace
}  // close enterprise namespace

""" + copyright()

endglobal

                                    # ###
                                    # inc
                                    # ###

snippet inc "C include directive" b
#include <$1.h>
endsnippet

                                   # #####
                                   # class
                                   # #####

snippet class
`!p snip.rv = centerBorder("=", "class " + t[1])`
`!p snip.rv = centerPadding("// class " + t[1]) + "// class "`$1
`!p snip.rv = centerBorder("=", "class " + t[1])`

`!p snip.rv = classDef(t[1])`
endsnippet

                                   # ######
                                   # classh
                                   # ######

snippet classh
`!p snip.rv = fileHeader_h(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "class " + t[2])`
`!p snip.rv = centerPadding("// class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("=", "class " + t[2])`

`!p snip.rv = classDef(t[2])`

`!p snip.rv = fileFooter_h()`
endsnippet

                                  # ########
                                  # classcpp
                                  # ########

snippet classcpp
`!p snip.rv = fileHeader_cpp(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "class " + t[2])`
`!p snip.rv = centerPadding("// class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("-", "class " + t[2])`

`!p snip.rv = fileFooter_cpp()`
endsnippet

                                   # ######
                                   # struct
                                   # ######

snippet struct
`!p snip.rv = centerBorder("=", "struct " + t[1])`
`!p snip.rv = centerPadding("// struct " + t[1]) + "// struct "`$1
`!p snip.rv = centerBorder("=", "struct " + t[1])`

`!p snip.rv = structDef(t[1])`
endsnippet

                                    # ####
                                    # util
                                    # ####

snippet util
`!p snip.rv = centerBorder("=", "struct " + t[1])`
`!p snip.rv = centerPadding("// struct " + t[1]) + "// struct "`$1
`!p snip.rv = centerBorder("=", "struct " + t[1])`

`!p snip.rv = utilDef(t[1])`
endsnippet

                                   # #####
                                   # utilh
                                   # #####

snippet utilh
`!p snip.rv = fileHeader_h(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "struct " + t[2])`
`!p snip.rv = centerPadding("// struct " + t[2]) + "// struct "`$2
`!p snip.rv = centerBorder("=", "struct " + t[2])`

`!p snip.rv = utilDef(t[2])`

`!p snip.rv = fileFooter_h()`
endsnippet

                                  # #######
                                  # utilcpp
                                  # #######

snippet utilcpp
`!p snip.rv = fileHeader_cpp(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "struct " + t[2])`
`!p snip.rv = centerPadding("// struct " + t[2]) + "// struct "`$2
`!p snip.rv = centerBorder("-", "struct " + t[2])`

`!p snip.rv = fileFooter_cpp()`
endsnippet

                                  # ########
                                  # protocol
                                  # ########

snippet protocol
`!p snip.rv = centerBorder("=", "class " + t[1])`
`!p snip.rv = centerPadding("// class " + t[1]) + "// class "`$1
`!p snip.rv = centerBorder("=", "class " + t[1])`

`!p snip.rv = protocolDef(t[1])`
endsnippet

                                 # #########
                                 # protocolh
                                 # #########

snippet protocolh
`!p snip.rv = fileHeader_h(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "class " + t[2])`
`!p snip.rv = centerPadding("// class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("=", "class " + t[2])`

`!p snip.rv = protocolDef(t[2])`

`!p snip.rv = fileFooter_h()`
endsnippet

                                # ###########
                                # protocolcpp
                                # ###########

snippet protocolcpp
`!p snip.rv = fileHeader_cpp(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "class " + t[2])`
`!p snip.rv = centerPadding("// class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("-", "class " + t[2])`

// CREATORS
$2::~$2()
{
}

`!p snip.rv = fileFooter_cpp()`
endsnippet

                                    # ####
                                    # enum
                                    # ####

snippet enum
`!p snip.rv = centerBorder("=", "struct " + t[1])`
`!p snip.rv = centerPadding("// struct " + t[1]) + "// struct "`$1
`!p snip.rv = centerBorder("=", "struct " + t[1])`

`!p snip.rv = enumDef(t[1])`
endsnippet

                                    # ###
                                    # pod
                                    # ###

snippet pod
`!p snip.rv = header("=", "class " + t[1])`

struct $1 {
	// TODO

	// DATA
};

endsnippet

                                 # #########
                                 # test_case
                                 # #########

snippet test_case "test case" m
case $1: {
  // --------------------------------------------------------------------
  // $2
  //
  // Concerns:
  //  a) $0
  //
  // Plan:
  //  1)
  //
  // Testing:
  // --------------------------------------------------------------------

  if (verbose) cout << endl
                    << "$2" << endl
`!p snip.rv = "                    << \"" + "="*len(t[2]) + "\" << endl;"`

} break;
endsnippet

                                   # ######
                                   # inline
                                   # ######

snippet inline
// ============================================================================
//                      INLINE AND TEMPLATE FUNCTION IMPLEMENTATIONS
// ============================================================================

$0
endsnippet

                                   # ######
                                   # tester
                                   # ######

snippet tester
                               // ============
                               // class Tester
                               // ============

class Tester {
    // Helper class testing $1, wrapping its creation and
    // providing convenient wrappers for calling its functions and checking
    // its results.
    //
    // Many of the functions take a 'int line' argument, which is always
    // passed 'L_' and is used in assertion messages to find where an error
    // occurred.

    // DATA
    bslma::Allocator      *d_allocator_p
    bslma::ManagedPtr<$1>  d_object;

    // PRIVATE MANIPULATORS
    void destroy();
    	// Destroy the object being tested and reset all supporting objects.

    // NOT IMPLEMENTED
    Tester(const Tester&);
    Tester& operator=(const Tester&);

  public:
    // TRAITS
    BSLMF_NESTED_TRAIT_DECLARATION(Tester,
    							   bslma::UsesBslmaAllocator);

    // CREATORS
    explicit Tester(bslma::Allocator *basicAllocator = 0);
	~Tester();

    // MANIPULATORS
    void init(int line);
        // (Re-)create the object being tested and reset the state of any
        // supporting objects.

    $1& object();
        // Return a reference providing modifiable access to the object being
        // tested.

};

                               // ------------
                               // class Tester
                               // ------------

// PRIVATE MANIPULATORS
void Tester::destroy()
{
    d_object.reset();
}

// CREATORS
Tester::Tester(bslma::Allocator *basicAllocator)
: d_allocator_p(bslma::Default::allocator(basicAllocator))
, d_object()
{
}

Tester::Tester()
{
	destroy();
}

// MANIPULATORS
void Tester::init(int line)
{
    d_object.load(new (*d_allocator_p) $1(d_allocator_p),
                  d_allocator_p);
}

$1& Tester::object()
{
    return *d_object;
}

endsnippet
