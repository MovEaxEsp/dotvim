# Snippets for C++ header files

global !p
from ultisnips_util import *

# Return the file header for the specified package and component
def fileHeader(package, component):
    comp = "// " + package + "_" + component.lower() + ".cpp"
    firstLine = comp + rightAlign(79 - len(comp), "-*-C++-*-")

    guard = "INCLUDED_" + package.upper() + "_" + component.upper()

    template = string.Template("""$firstLine
#include <${package}_${component}.h>

///IMPLEMENTATION NOTES
///--------------------
//

namespace BloombergLP {""")

    return template.safe_substitute({"firstLine": firstLine,
                                     "package": package.lower(),
                                     "component": component.lower()})

# Return the file footer
def fileFooter():
    return """}  // close package namespace
}  // close enterprise namespace

""" + copyright()
endglobal

snippet inc
#include <$1.h>
endsnippet

snippet classf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "class " + t[2])`
`!p snip.rv = centerPadding("class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("-", "class " + t[2])`

`!p snip.rv = fileFooter()`
endsnippet

snippet utilf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "struct " + t[2])`
`!p snip.rv = centerPadding("struct " + t[2]) + "// struct "`$2
`!p snip.rv = centerBorder("-", "struct " + t[2])`

`!p snip.rv = fileFooter()`
endsnippet

snippet protocolf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("-", "class " + t[2])`
`!p snip.rv = centerPadding("class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("-", "class " + t[2])`

// CREATORS
$2::~$2()
{
}

`!p snip.rv = fileFooter()`
endsnippet
