# Snippets for C++ header files

global !p
from ultisnips_util import *

# Return the file header for the specified package and component
def fileHeader(package, component):
	comp = "// " + package + "_" + component.lower() + ".h"
	firstLine = comp + rightAlign(79 - len(comp), "-*-C++-*-")

	guard = "INCLUDED_" + package.upper() + "_" + component.upper()

	template = """$firstLine
#ifndef $guard
#define $guard

//@PURPOSE: TODO
//
//@CLASSES:
// """ + package + "::" + component + """
//
//@SEE_ALSO:
//
//@DESCRIPTION: TODO

namespace BloombergLP {"""

	return string.Template(template).safe_substitute({
		"firstLine": firstLine,
		"guard":guard
	})

# Return the file footer
def fileFooter():
	return """}  // close package namespace
}  // close enterprise namespace

#endif

""" + copyright()
endglobal



snippet inc
#ifndef INCLUDED_`!p snip.rv = t[1].upper()`
#include <$1.h>
#endif
endsnippet

snippet classf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "class " + t[2])`
`!p snip.rv = centerPadding("class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("=", "class " + t[2])`

`!p snip.rv = classDef(t[2])`

`!p snip.rv = fileFooter()`
endsnippet

snippet utilf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "struct " + t[2])`
`!p snip.rv = centerPadding("struct " + t[2]) + "// struct "`$2
`!p snip.rv = centerBorder("=", "struct " + t[2])`

`!p snip.rv = utilDef(t[2])`

`!p snip.rv = fileFooter()`
endsnippet

snippet protocolf
`!p snip.rv = fileHeader(t[1], t[2])`
namespace $1 {

`!p snip.rv = centerBorder("=", "class " + t[2])`
`!p snip.rv = centerPadding("class " + t[2]) + "// class "`$2
`!p snip.rv = centerBorder("=", "class " + t[2])`

`!p snip.rv = protocolDef(t[2])`

`!p snip.rv = fileFooter()`
endsnippet
